Here is a simple shell script that will convert the content of a file from lowercase to uppercase:

#!/bin/bash

# Prompt user for file name
echo "Enter the file name: "
read fileName

# Check if file exists
if [ -f $fileName ]; then
   # Convert file content to uppercase
   tr '[:lower:]' '[:upper:]' < $fileName > temp_file
   mv temp_file $fileName
   echo "File content successfully converted to uppercase."
else
   echo "File does not exist."
fi



Here is a simple shell script that will count the number of words, lines, and characters in a given file:

#!/bin/bash

# Prompt user for file name
echo "Enter the file name: "
read fileName

# Check if file exists
if [ -f $fileName ]; then
   # Count words, lines, and characters
   wc=$(wc -w -l -m $fileName)
   echo "File statistics: "
   echo "$wc"
else
   echo "File does not exist."
fi


File statistics:
  <number of lines> <number of words> <number of characters> <file name>

<number of lines> <number of words> <number of characters> <file name>


Here is a simple shell script that will take a word from the user and find out the frequency of the word in a given file:

#!/bin/bash

# Prompt user for file name
echo "Enter the file name: "
read fileName

# Prompt user for word
echo "Enter the word to search: "
read word

# Check if file exists
if [ -f $fileName ]; then
   # Count the frequency of the word in the file
   frequency=$(grep -o $word $fileName | wc -w)
   echo "The word '$word' appears $frequency times in the file $fileName"
else
   echo "File does not exist."
fi


Here is a simple shell script that can be placed in the /etc/profile.d/ directory, which gets executed at the moment of user login and displays a greeting depending upon the time of day:

#!/bin/bash

current_time=$(date +%H)

if [ $current_time -ge 0 -a $current_time -lt 12 ]; then
    echo "Good morning, welcome back!"
elif [ $current_time -ge 12 -a $current_time -lt 18 ]; then
    echo "Good afternoon, welcome back!"
else
    echo "Good evening, welcome back!"
fi

Here is a simple shell script that will print a Pascal Diamond:

#!/bin/bash

n=5

for ((i=0;i<=n;i++))
do
  for ((k=n;k>i;k--))
  do
    echo -n " "
  done
  for ((j=0;j<=i;j++))
  do
    echo -n " $((j)) "
  done
  for ((j=i-1;j>=0;j--))
  do
    echo -n " $((j)) "
  done
  echo ""
done

for ((i=n-1;i>=0;i--))
do
  for ((k=n;k>i;k--))
  do
    echo -n " "
  done
  for ((j=0;j<=i;j++))
  do
    echo -n " $((j)) "
  done
  for ((j=i-1;j>=0;j--))
  do
    echo -n " $((j)) "
  done
  echo ""
done


Here is a simple shell script that will find a number using the sequential search method:

#!/bin/bash

# Prompt user for a list of numbers
echo "Enter a list of numbers separated by space: "
read -a numbers

# Prompt user for the number to search
echo "Enter the number to search: "
read search_num

# Initialize flag to 0
flag=0

# Iterate through the list of numbers
for num in "${numbers[@]}"
do
  if [ $num -eq $search_num ]; then
    # Number found
    echo "Number $search_num found in the list."
    flag=1
    break
  fi
done

if [ $flag -eq 0 ]; then
  # Number not found
  echo "Number $search_num not found in the list."
fi


Here's an example of a shell script that performs a binary search for a given number:

#!/bin/bash

# Function to perform binary search
binary_search() {
  local -a arr=("${!1}")  # pass array as reference
  local target=$2
  local low=0
  local high="${#arr[@]}"

  while [[ low -lt high ]]; do
    local mid=$(( (low+high) / 2 ))
    if [[ ${arr[mid]} -eq $target ]]; then
      echo "Found: ${arr[mid]}"
      return 0  # return success
    elif [[ ${arr[mid]} -lt $target ]]; then
      low=$(( mid + 1 ))
    else
      high=$(( mid - 1 ))
    fi
  done
  echo "Not found"
  return 1  # return failure
}

# Test the function
arr=(1 3 4 6 8 9 10 12 15 17 19)
binary_search arr[@] 9


Here's an example of a shell script that uses the bubble sort algorithm to sort a set of integers:

#!/bin/bash

# Function to perform bubble sort
bubble_sort() {
  local -a arr=("${!1}")  # pass array as reference
  local temp
  local n=${#arr[@]}

  for (( i=0; i<n-1; i++ )); do
    for (( j=0; j<n-i-1; j++ )); do
      if [[ ${arr[j]} -gt ${arr[j+1]} ]]; then
        # swap the elements
        temp=${arr[j]}
        arr[j]=${arr[j+1]}
        arr[j+1]=$temp
      fi
    done
  done
  echo "${arr[@]}"  # print the sorted array
}

# Test the function
arr=(5 3 8 1 6 4)
bubble_sort arr[@]

Here's an example of a shell script that finds the factorial of a given number using a recursive function:

#!/bin/bash

# Function to find the factorial of a given number
factorial() {
  local number=$1
  if [[ number -eq 0 ]]; then
    echo 1
  else
    echo $(( number * $(factorial $(( number-1 ))) ))
  fi
}

# Test the function
echo "Factorial of 5 is: $(factorial 5)"


Here's an example of a shell script that reverses a string and checks whether it is a palindrome:

#!/bin/bash

# Function to reverse a string
reverse_string() {
  local str=$1
  local reversed=""
  for (( i=${#str}-1; i>=0; i-- )); do
    reversed+=${str:$i:1}
  done
  echo $reversed
}

# Function to check if a string is a palindrome
is_palindrome() {
  local str=$1
  local reversed=$(reverse_string $str)
  if [[ $str == $reversed ]]; then
    echo "String '$str' is a palindrome."
  else
    echo "String '$str' is not a palindrome."
  fi
}

# Test the function
string="madam"
is_palindrome $string


Here's an example of a shell script that finds the roots of a quadratic equation ax^2+bx+c=0, considering all possible cases:

#!/bin/bash

# Function to find the roots of a quadratic equation
find_roots() {
  local a=$1
  local b=$2
  local c=$3

  local discriminant=$(( b*b - 4*a*c ))

  if [[ $discriminant -gt 0 ]]; then
    echo "Roots are real and different."
    local root1=$(echo "scale=2; (-$b + sqrt($discriminant)) / (2*$a)" | bc)
    local root2=$(echo "scale=2; (-$b - sqrt($discriminant)) / (2*$a)" | bc)
    echo "Root 1: $root1"
    echo "Root 2: $root2"
  elif [[ $discriminant -eq 0 ]]; then
    echo "Roots are real and same."
    local root=$(echo "scale=2; -$b / (2*$a)" | bc)
    echo "Root: $root"
  else
    echo "Roots are complex and different."
    local real=$(echo "scale=2; -$b / (2*$a)" | bc)
    local imag=$(echo "scale=2; sqrt(-$discriminant) / (2*$a)" | bc)
    echo "Root 1: $real + $imag i"
    echo "Root 2: $real - $imag i"
  fi
}

# Test the function
a=1
b=5
c=6
find_roots $a $b $c


Here's an example of a shell script that creates a menu-based system to insert records for employees with employee ID, name, designation, and salary in a data file, and also display records when necessary:

#!/bin/bash

data_file="employee.txt"

# Function to insert employee record
insert_record() {
  echo "Enter Employee ID:"
  read id
  echo "Enter Employee Name:"
  read name
  echo "Enter Employee Designation:"
  read designation
  echo "Enter Employee Salary:"
  read salary

  echo "$id, $name, $designation, $salary" >> $data_file
  echo "Record inserted successfully!"
}

# Function to display all employee records
display_records() {
  if [[ ! -f $data_file ]]; then
    echo "No records found!"
    return
  fi

  echo "Employee ID, Name, Designation, Salary"
  cat $data_file
}

# Function to display salary for an employee
display_salary() {
  if [[ ! -f $data_file ]]; then
    echo "No records found!"
    return
  fi

  echo "Enter Employee ID:"
  read id

  salary=$(grep "^$id," $data_file | awk -F, '{print $4}')
  if [[ -z $salary ]]; then
    echo "Employee not found!"
  else
    echo "Employee Salary: $salary"
  fi
}

# Main menu
while true; do
  echo "1. Insert Record"
  echo "2. Display Records"
  echo "3. Display Salary"
  echo "4. Exit"
  read -p "Enter your choice: " choice

  case $choice in
    1)
      insert_record
      ;;
    2)
      display_records
      ;;
    3)
      display_salary
      ;;
    4)
      exit 0
      ;;
    *)
      echo "Invalid choice. Try again."
      ;;
  esac
done



XXXXX-XXXXX-XXXX



